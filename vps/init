#!/bin/bash
# Script to setup account on VPS, verified versions: Ubuntu 22.04, Debian 12.
#
# Example usage: curl -L fmt.re/vps/init | bash -s ymattw

set -o errexit
set -o nounset

GITHUB_ID="${1?:'Usage: $0 <github username>'}"

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin

function main
{
    install_pkgs
    create_user
    modify_user
    setup_ssh
    setup_sshd
    setup_sudo
    setup_firewall
    setup_resolved
    disable_exim
    disable_rpcbind
}

function install_pkgs
{
    sudo apt update -y
    sudo apt install -y \
        cron \
        docker.io \
        git \
        locate \
        make \
        net-tools \
        python3-venv \
        qrencode \
        rsync \
        tmux \
        tree \
        ufw \
        vim-nox \
        zsh
}

function create_user
{
    ! id $GITHUB_ID >& /dev/null || return 0

    echo "Creating user $GITHUB_ID"
    sudo useradd --home-dir /home/$GITHUB_ID --create-home \
        --shell /bin/zsh $GITHUB_ID
    id $GITHUB_ID
}

function modify_user
{
    local home=$(eval echo ~${GITHUB_ID})

    sudo usermod -a -G docker $GITHUB_ID
    [[ -f $home/.zshrc ]] || {
        # Set up a minimal zsh prompt
        echo "PROMPT='%(?.%F{green}✔.%F{red}✘)%f %m:%~ %# '" \
            | sudo tee $home/.zshrc > /dev/null
        sudo chown $GITHUB_ID $home/.zshrc
    }
}

function setup_ssh
{
    local home=$(eval echo ~${GITHUB_ID})
    local key_file=$home/.ssh/authorized_keys
    local key_line
    local tmpf

    sudo mkdir -p $home/.ssh
    sudo touch $key_file
    sudo chown $GITHUB_ID $home $home/.ssh $key_file
    sudo chmod go-w $home
    sudo chmod -R 700 $home/.ssh

    # Fix missing EOL
    [[ -z $(sudo tail -c 1 $key_file) ]] || echo | sudo tee -a $key_file

    tmpf=$(mktemp)
    trap "rm -f $tmpf" RETURN
    curl -SsL https://github.com/${GITHUB_ID}.keys > $tmpf

    while read -r key_line; do
        setup_public_key $key_file "$key_line"
    done < $tmpf

    sudo chmod 600 $home/.ssh/authorized_keys
}

function setup_public_key
{
    local key_file=${1:?}
    local pkey=${2:?}

    ! sudo grep -qF "$pkey" $key_file || return 0
    echo "Adding ssh public key: $pkey"
    echo "$pkey" | sudo tee -a $key_file
}

function setup_sshd
{
    ! grep -q '^Port 60022$' /etc/ssh/sshd_config || return 0

    echo "Updating ssh listening port from 22 to 60022 / disable root login"
    sudo sed -i'' -r \
        -e 's/^#?\s*Port 22$/Port 60022/' \
        -e 's/^#?\s*PermitRootLogin .*/PermitRootLogin no/' \
        /etc/ssh/sshd_config
    sudo systemctl restart ssh
}

function setup_sudo
{
    ! sudo -l -U $GITHUB_ID | grep -Eq "NOPASSWD:[[:blank:]]*ALL" || return 0

    echo "Add sudoer entry file for $GITHUB_ID"
    echo "$GITHUB_ID ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$GITHUB_ID
    sudo chmod 440 /etc/sudoers.d/$GITHUB_ID
    sudo -l -U $GITHUB_ID
}

function setup_firewall
{
    sudo ufw default allow routed
    sudo ufw allow proto tcp from any to any port 22,80,443,60000:65535
    sudo ufw allow proto udp from any to any port 60000:65535
    sudo ufw --force enable
    sudo ufw reload
}

function setup_resolved
{
    [[ -f /etc/systemd/resolved.conf ]] || return 0
    ! grep -q '^LLMNR=no$' /etc/systemd/resolved.conf || return 0
    sudo sed -i'' -r \
        -e 's/^#?\s*LLMNR=.*/LLMNR=no/' \
        /etc/systemd/resolved.conf
    sudo systemctl restart systemd-resolved
}

function disable_exim
{
    [[ -f /usr/sbin/exim4 ]] || return 0
    sudo systemctl stop exim4
    sudo systemctl disable exim4
}

function disable_rpcbind
{
    [[ -f /sbin/rpcbind ]] || return 0
    sudo systemctl stop rpcbind.service
    sudo systemctl stop rpcbind.socket
    sudo systemctl disable rpcbind.service
    sudo systemctl disable rpcbind.socket
}

main "$@"
